reticulate::repl_python()
library(dbscan)
install.packages("dbscan")
library(dbscan)
# lectura de datos
halcones <- read.csv("./Halcones_mexico.csv", header = T)
# filtramos solo la especie de interés
halcones <- halcones %>%
select(common_name, latitude, longitude) %>%
filter(common_name=="Bat Falcon")
library(dplyr)
library(lubridate)
library(spThin)
library(dplyr)
library(dbscan)
# filtramos solo la especie de interés
halcones <- halcones %>%
select(common_name, latitude, longitude) %>%
filter(common_name=="Bat Falcon")
plot(halcones$longitude, halcones$latitude)
thinned_dataset_full <- thin( loc.data = halcones,
lat.col = "latitude", long.col = "longitude",
spec.col = "common_name", #campo con la especie
thin.par = 5, reps = 10, #thin par es la distancia en km para separar los puntos
locs.thinned.list.return = TRUE,
write.files = F,
max.files = 5, #Numero de posibles soluciones de seleccion
out.dir = "XXX",
out.base = "bat_thinned", #crear? directorio y archivos con los registros seleccionados
write.log.file = TRUE,
log.file = "bat_thinned_file.txt" ) #un resumen del proceso y sus resultados
View(thinned_dataset_full)
bat <- thinned_dataset_full[1] %>%
as.data.frame()
View(bat)
kNNdistplot(bat, k = 5  )
abline(h = 0.4, lty = 2)
kNNdistplot(bat, k = 5  )
abline(h = 0.4, lty = 2)
kNNdistplot(bat, k = 5  )
abline(h = 0.7, lty = 2)
kNNdistplot(bat, k = 5  )
abline(h = 0.5, lty = 2)
kNNdistplot(bat, k = 5  )
abline(h = 0.55, lty = 2)
cl1<-dbscan(bat,eps=0.55,MinPts = 5)
hullplot(df,cl1$cluster,  main = "Convex cluster Hulls, eps= 0.55")
View(cl1)
hullplot(bat,cl1$cluster,  main = "Convex cluster Hulls, eps= 0.55")
cl1<-dbscan(bat,eps=0.55,MinPts = 4)
hullplot(bat,cl1$cluster,  main = "Convex cluster Hulls, eps= 0.55")
library (maptools)
library(raster)
plot(bat[, 1:2], col = "red")
data("wrld_simpl")
plot(wrld_simpl, add = T)
wc <- raster::getData("worldclim", var = "bio", res = 10)
plot(wc[[c(1,2,3)]], nr = 3)
clima_bat <- extract(wc, bat[,1:2])
head(clima_bat)
pa <- c(rep(1, 669))
pa
clima_bat <- cbind(clima_bat, pa)
head(clima_bat)
plot(bat[,1:2], cex = 0.5, col = "blue")
plot(wrld_simpl, add = T)
clima_bat
plot(clima_bat[,1]/10, clima_bat[,12], xlab = "Bio1", ylab = "Bio12")
# definicion random expectation: también llamada background, o random absence data,
# es lo que obtendrías si la especie no tuviera ninguna preferencia por ninguna de
# las variables predictora (u otras variables que no estén correlacionadas con las
# variables predictoras).
install.packages("dismo")
library(dismo)
ext <- extent(SpatialPoints(bat[,1:2]))
ext  # la extensión de la distribución de la especie
# generamos 1000 muestras aleatorias de extent
set.seed(0)
random_a <- sampleRandom(wc, 1000, ext = ext) # ext = para limitar el muestreo al
# generamos columna de presencia 1 ausencia 0
pa <- c(rep(0, 1000))
random_a <- cbind(random_a, pa)
head(random_a)
bat_completo <- rbind(clima_bat, random_a)
# random forest clasificacion -----------------------------------------------------------
install.packages("randomForest")
library(randomForest)
fpa <- as.factor(bat_completo[,"pa"])
modelo <- randomForest(bat_completo[,1:19], fpa)
modelo
plot(modelo)
# importancia de variables
varImpPlot(modelo)
mex <- getData("GADM", country = "MEX", level = 1)
plot(predict(wc, modelo, ext = mex))
plot(predict(wc, modelo, ext=mex, type = "prob", index = 2))
# evaluar el modelo: NO LOGRO QUE CORRA
eva <- evaluate(bat_completo[bat_completo$pa==1, ], bat_completo[bat_completo$pa==0,], modelo)
bat_completo
View(wc)
wc[[c(1,2,3)]]
wc[[1]]
wc[[2]]
wc$bio19
View(wc)
wc[1]
wc["bio1"]
plot(wc[[c(1,2,3)]], nr = 3)
View(clima_bat)
View(clima_bat)
plot(bat[,1:2], cex = 0.5, col = "blue")
plot(wrld_simpl, add = T)
plot(clima_bat[,1]/10, clima_bat[,12], xlab = "Bio1", ylab = "Bio12")
ext <- extent(SpatialPoints(bat[,1:2]))
ext  # la extensión de la distribución de la especie
# generamos columna de presencia 1 ausencia 0
pa <- c(rep(0, 1000))
random_a <- cbind(random_a, pa)
head(random_a)
remove(list=ls())
library(dismo)
# lectura de datos
halcones <- read.csv("./Halcones_mexico.csv", header = T)
#table(halcones$common_name) # las categorias de especies en la tabla
#halcones$observation_date <- as.Date(halcones$observation_date, format = "%Y-%m-%d")
#summary(halcones$observation_date)
# filtramos solo la especie de interés
halcones <- halcones %>%
select(common_name, latitude, longitude) %>%
filter(common_name=="Bat Falcon")
```{r include=FALSE}
library(dplyr)
library(lubridate)
library(spThin)
library(dplyr)
library(dbscan)
# filtramos solo la especie de interés
halcones <- halcones %>%
select(common_name, latitude, longitude) %>%
filter(common_name=="Bat Falcon")
# lectura de datos
halcones <- read.csv("./Halcones_mexico.csv", header = T)
# filtramos solo la especie de interés
halcones <- halcones %>%
select(common_name, latitude, longitude) %>%
filter(common_name=="Bat Falcon")
# filtramos solo la especie de interés
halcones <- halcones %>%
dplyr::select(common_name, latitude, longitude) %>%
dplyr::filter(common_name=="Bat Falcon")
plot(halcones$longitude, halcones$latitude)
thinned_dataset_full <- thin( loc.data = halcones,
lat.col = "latitude", long.col = "longitude",
spec.col = "common_name", #campo con la especie
thin.par = 5, reps = 10, #thin par es la distancia en km para separar los puntos
locs.thinned.list.return = TRUE,
write.files = F,
max.files = 5, #Numero de posibles soluciones de seleccion
out.dir = "XXX",
out.base = "bat_thinned", #crear? directorio y archivos con los registros seleccionados
write.log.file = TRUE,
log.file = "bat_thinned_file.txt" ) #un resumen del proceso y sus resultados
bat <- thinned_dataset_full[1] %>%
as.data.frame()
library (maptools)
library(raster)
plot(bat[, 1:2], col = "red")
data("wrld_simpl")
plot(wrld_simpl, add = T)
wc <- raster::getData("worldclim", var = "bio", res = 10)
plot(wc[[c(1,2,3)]], nr = 3)
clima_bat <- extract(wc, bat[,1:2])
head(clima_bat)
pa <- c(rep(1, 669))
clima_bat <- cbind(clima_bat, pa)
head(clima_bat)
plot(bat[,1:2], cex = 0.5, col = "blue")
plot(bat[,1:2], cex = 0.5, col = "blue")
plot(wrld_simpl, add = T)
plot(clima_bat[,1]/10, clima_bat[,12], xlab = "Bio1", ylab = "Bio12")
library(dismo)
ext <- extent(SpatialPoints(bat[,1:2]))
View(ext)
# generamos 1000 muestras aleatorias de extent
set.seed(0)
random_a <- sampleRandom(wc, 1000, ext = ext) # ext = para limitar el muestreo al
View(random_a)
View(wc)
# generamos columna de presencia 1 ausencia 0
pa <- c(rep(0, 1000))
random_a <- cbind(random_a, pa)
head(random_a)
bat_completo <- rbind(clima_bat, random_a)
# random forest clasificacion -----------------------------------------------------------
install.packages("randomForest")
# random forest clasificacion -----------------------------------------------------------
#install.packages("randomForest")
library(randomForest)
fpa <- as.factor(bat_completo[,"pa"])
modelo <- randomForest(bat_completo[,1:19], fpa)
modelo
plot(modelo)
# importancia de variables
varImpPlot(modelo)
mex <- getData("GADM", country = "MEX", level = 1)
plot(predict(wc, modelo, ext = mex))
plot(predict(wc, modelo, ext=mex, type = "prob", index = 2))
# evaluar el modelo: NO LOGRO QUE CORRA
eva <- evaluate(bat_completo[bat_completo$pa==1, ], bat_completo[bat_completo$pa==0,], modelo)
bat_completo[bat_completo$pa==1, ]
# evaluar el modelo: NO LOGRO QUE CORRA
pr <- bat_completo %>%
dplyr::filter(pa==1) %>%
dplyr::pull()
View(bat_completo)
class(bat_completo)
ab <-
eva <- evaluate(bat_completo[bat_completo[20]==1, ], bat_completo[bat_completo$pa==0,], modelo)
bat_completo[bat_completo[20]==1, ]
bat_completo[bat_completo[20]==0, ]
bat_completo[bat_completo[20]=0, ]
# evaluar el modelo: NO LOGRO QUE CORRA
pr <- bat_completo %>%
as.data.frame() %>%
dplyr::filter(pa==1) %>%
dplyr::pull()
ab <- bat_completo %>%
as.data.frame() %>%
dplyr::filter(pa==0) %>%
dplyr::pull()
eva <- evaluate(pr, ab, modelo)
eva
modelo
modelo <- randomForest(x = bat_completo[,1:19], y= fpa)
modelo
plot(modelo)
# importancia de variables
varImpPlot(modelo)
mex <- getData("GADM", country = "MEX", level = 1)
View(bat_completo)
# evaluar el modelo: NO LOGRO QUE CORRA
pred <- predict(wc, modelo, ext = mex)
pred
View(pred)
pred$data
pred$layer
View(pred)
eva <- evaluate(p = pred[which(pa == "1")],
a = pred[which(pa== "0")], modelo)
pred[which(pa == "1")]
View(mex)
mex$data
mex$GID_0
View(mex)
# evaluar el modelo: NO LOGRO QUE CORRA
pred <- predict(wc, modelo, ext = mex)
pred
# evaluar el modelo: NO LOGRO QUE CORRA
pred <- predict(wc, modelo, ext = mex)[,2]
pred
# evaluar el modelo: NO LOGRO QUE CORRA
pred <- predict(wc, modelo, ext = mex)
pred[,1]
pred[,2]
pred[1]
pred[2]
pred[[2]]
pred <- predict( modelo)[,2]
pred <- predict( modelo, type="prob")[,2]
eva <- evaluate(p = pred[which(pa == "1")],
a = pred[which(pa== "0")], modelo)
pred
# random forest regresion -------------------------------------------------
library(rpart)
View(bat_completo)
cart <- rpart(as.factor(pa)~., data=bat_completo)
bat_completor <- bat_completo %>%
as.data.frame()
cart <- rpart(pa~., data=bat_completor)
printcp(cart)
plotcp(cart)
trf <- tuneRF(bat_completor[, 1:ncol(dw)-1], bat_completor[, 'pa'])
trf <- tuneRF(bat_completor[, 1:ncol(bat_completor)-1], bat_completor[, 'pa'])
trf
mt <- trf[which.min(trf[,2]), 1]
mt
trf <- tuneRF(bat_completor[, 1:19], bat_completor[, 'pa'])
trf
mt <- trf[which.min(trf[,2]), 1]
mt
rrf <- randomForest(bat_completor[, 1:19], bat_completor[, 'pa'], mtry=mt)
rrf
plot(rrf)
varImpPlot(rrf)
#predictions
rp <- predict(wc, rrf, ext=mex)
plot(rp)
eva <- evaluate(bat_completor[bat_completor$pa==1, ], bat_completor[bat_completor$pa==0, ], rrf)
eva
plot(eva, 'ROC')
rp
View(rp)
rp$layer
plot(rp)
random_ar <- sampleRandom(wc, 3000, ext = ext) # ext = para limitar el muestreo al
# generamos columna de presencia 1 ausencia 0
par <- c(rep(0, 3000))
random_ar <- cbind(random_ar, par)
bat_completor <- rbind(clima_bat, random_ar)
# generamos columna de presencia 1 ausencia 0
par <- c(rep(0, 3000))
random_ar <- cbind(random_ar, par)
bat_completor <- rbind(clima_bat, random_ar)
random_ar <- sampleRandom(wc, 3000, ext = ext) # ext = para limitar el muestreo al
# generamos columna de presencia 1 ausencia 0
par <- c(rep(0, 3000))
random_ar <- cbind(random_ar, par)
bat_completor <- rbind(clima_bat, random_ar)
clima_bat
random_ar
bat_completor <- rbind(clima_bat, random_ar)
bat_completor
bat_completor <- bat_completo %>%
as.data.frame()
bat_completor <- bat_completor %>%
as.data.frame()
bat_completor <- rbind(clima_bat, random_ar)
bat_completor <- bat_completor %>%
as.data.frame()
library(rsample)
bat_split <- initial_split(bat_completor, strata = pa)
train_data <- training(bat_split)
test_data <- testing(bat_split)
cart <- rpart(pa~., data=train_data)
printcp(cart)
plotcp(cart)
trf <- tuneRF(bat_completor[, 1:19], bat_completor[, 'pa'])
trf
mt <- trf[which.min(trf[,2]), 1]
mt
rrf <- randomForest(bat_completor[, 1:19], bat_completor[, 'pa'], mtry=mt)
cart <- rpart(pa~., data=train_data)
printcp(cart)
plotcp(cart)
trf <- tuneRF(train_data[, 1:19], train_data[, 'pa'])
trf
mt <- trf[which.min(trf[,2]), 1]
mt
rrf <- randomForest(train_data[, 1:19], train_data[, 'pa'], mtry=mt)
rrf
plot(rrf)
varImpPlot(rrf)
#predictions
rp <- predict(wc, rrf, ext=mex)
plot(rp)
eva <- evaluate(bat_completor[bat_completor$pa==1, ], bat_completor[bat_completor$pa==0, ], rrf)
eva
eva <- evaluate(train_data[train_data$pa==1, ], train_data[train_data$pa==0, ], rrf)
eva
plot(eva, 'ROC')
eva <- evaluate(test_data[test_data$pa==1, ], test_data[test_data$pa==0, ], rrf)
eva
plot(eva, 'ROC')
install.packages('reticulate')
library(reticulate)
use_python("/usr/local/bin/python3")
